#!/usr/bin/perl -w

use strict; # Requiere declaracion de variables.
use DBI;    # Modulo para bases de datos.
use File::Find;

# Datos de la Conexión
our $db = "postfix";
our $host = "localhost";
our $port = "3306";
our $userid = "postfixuser";
our $passwd = "postfixpass";

our $quota = 100 ; # Quota por defecto del mailbox en MB.

our $connectionInfo = "DBI:mysql:database=$db;$host:$port";
our $sql;         # para armar la sentencia sql.
our $consulta;    # para consultar la base
our @data;			# para extraer los registros de la consulta.
our $rta;			# respuesta de las consultas 'no select'


if (!@ARGV) { &ImprimeHelp(); }  # Si no hay argumentos imprimo help (y aborta)


# Establezco conexion con la base.
my $dbh = DBI -> connect($connectionInfo,$userid,$passwd) || die "\nError al abrir la base datos:\n$DBI::errstr\n";


### Evaluo Argumentos

if (($ARGV[0] eq "add") and ($ARGV[1] eq "user")) {				# Agrega nueva Cuenta.
&NuevaCuenta();

} elsif (($ARGV[0] eq "add") and ($ARGV[1] eq "domain")) {		# Agrega nuevo Dominio.
&NuevoDominio();

} elsif (($ARGV[0] eq "add") and ($ARGV[1] eq "alias")) {		# Agrega un Alias.
&NuevoAlias();

} elsif (($ARGV[0] eq "del") and ($ARGV[1] eq "alias")) {		# Elimina un Alias.
&EliminaAlias();

} elsif (($ARGV[0] eq "del") and ($ARGV[1] eq "user")) {		# Elimina una Cuenta.
&EliminaCuenta();

} elsif (($ARGV[0] eq "del") and ($ARGV[1] eq "domain")) {		# Elimina un Dominio.
&EliminaDominio();

} elsif ($ARGV[0] eq "quota") {		# Muestra y Modifica la quota de usuario.
&ModificaQuota();

} elsif ($ARGV[0] eq "pass") {		# Muestra y Modifica la clave de una cuenta.
&ModificaPass();

} elsif (($ARGV[0] eq "ver") and ($ARGV[1] eq "alias")){			# Muestra los destinos de un alias.
&VerAlias();

} elsif (($ARGV[0] eq "ver") and ($ARGV[1] eq "user")){			# Muestra los destinos de un alias.
&VerCuentas();

} elsif (($ARGV[0] eq "ver") and ($ARGV[1] eq "dominio")){		# Muestra los destinos de un alias.
&VerDominios();

} elsif (($ARGV[0] eq "importar") and ($ARGV[1] eq "cuentas")) {	# Importa cuentas desde archivo.
&ImportaCuentas();

} elsif (($ARGV[0] eq "importar") and ($ARGV[1] eq "alias")) {		# Importa alias desde archivo.
&ImportaAlias();

} elsif ($ARGV[0] eq "delmail") {			# Busca un mail en un alias de grupo.
&EliminaMaildeAlias($ARGV[1],$ARGV[2]);

} elsif ($ARGV[0] eq "sql") {				# Busca un mail en un alias de grupo.
&EjecutaSQL();

} else { print "No entiendo lo que tengo que hacer :-(\n"; }


# Termina normal.
&Fin();

sub ImprimeHelp() {

print "                            _\\\|/_\n";
print "                            \(o o\)\n";
print "  +----------------------oOO-{_}-OOo-----------------------+\n";
print "  |  pfix v0.99                                Diego 2011  |\n";
print "  |  Administrador de Postfix       dieperez\@buquebus.com  |\n";
print "  +--------------------------------------------------------+\n";
print "  | Ejemplos de uso:                                       |\n";
print "  |                                                        |\n";
print "  | -Agregar nueva cuenta:                                 |\n";
print "  |  pfix add user [email] [Nombre Completo]               |\n";
print "  |                                                        |\n";
print "  | -Agregar nuevo dominio:                                |\n";
print "  |  pfix add domain [dominio] [descripcion]               |\n";
print "  |                                                        |\n";
print "  | -Agregar nuevo alias:                                  |\n";
print "  |  pfix add alias [alias] [mail_destino]                 |\n";
print "  |                                                        |\n";
print "  | -Ver Cuentas:                                          |\n";
print "  |  pfix ver user [cadena]                                |\n";
print "  |                                                        |\n";
print "  | -Ver Alias:                                            |\n";
print "  |  pfix ver alias [cadena]                               |\n";
print "  |                                                        |\n";
print "  | -Ver Dominios:                                         |\n";
print "  |  pfix ver dominio [cadena]                             |\n";
print "  |                                                        |\n";
print "  | -Eliminar alias:                                       |\n";
print "  |  pfix del alias [alias]                                |\n";
print "  |                                                        |\n";
print "  | -Eliminar dominio:                                     |\n";
print "  |  pfix del domain [dominio]                             |\n";
print "  |                                                        |\n";
print "  | -Eliminar cuenta:                                      |\n";
print "  |  pfix del user [email]                                 |\n";
print "  |                                                        |\n";
print "  | -Ver y/o modificar quota de usuario:                   |\n";
print "  |  pfix quota [email]                                    |\n";
print "  |                                                        |\n";
print "  | -Ver y/o modificar el password de una cuenta:          |\n";
print "  |  pfix pass [email]                                     |\n";
print "  +--------------------------------------------------------+\n";
&Fin();
} # Fin ImprimeHelp


sub NuevaCuenta() {

my $mail;				# Contendra el mail completo.
my $clave;				# Password de la cuenta.
my $inicial;			# Inicial del usuario. (para crear la ruta del maildir)
my @divido_mail;		# Para separar el usuario del dominio del mail.
my $usuario;			# Antes del @ en el mail.
my $dominio;			# Despues del @ en el mail.
my $nombre_completo;	# Nombre completo o descripcion de la cuenta.

# Si se paso el mail por argumento se lo asigno a la variable $mail
# Si no, lo pido.
if ($ARGV[2]) { $mail = $ARGV[2]; }
else { print "Ingrese el email. >"; $mail = <stdin>; chop $mail; }

# Si el mail no es mail o es nulo salgo.
if (!esmail($mail)) { print "El email no es válido.\n"; &Fin();}

# Existe la cuenta en la base?
if ( existeMail($mail) ) {	print "Oops! la cuenta \'$mail\' ya existe.\n"; &Fin(); }

# Obtengo usuario, la inicial y el dominio desde el mail.
@divido_mail = split(/\@/,$mail);	# separo el usuario y dominio desde el mail.
$usuario = $divido_mail[0];			# Por claridad se lo asigno a $usuario.
$dominio = $divido_mail[1];			# Por claridad se lo asigno a $dominio.
$inicial = substr($usuario,0,1);	# Extraigo la inicial del usuario.

# Chequeo que exista el dominio
if ( !existeDominio($dominio) ) {
	print "El dominio \'$dominio\' no existe. Debe crear primero el dominio.\n";
	&Fin();
}

# Pido el passowrd de la cuenta.
print "Password para la cuenta? >"; $clave = <stdin>; chop $clave;

# A partir del parametro 3 hasta el final es el nombre completo o descripcion de la cuenta.
# Entonces si existe parametro 3, me pasaron el nombre por linea de ordenes y lo rejunto.
# Si no hay parametro 3, directamente pido el nombre.
if ($ARGV[3]) {
	my $i = 3;
	$nombre_completo = "";
	while ($ARGV[$i]){ #Arranco en el 3 y mientras tenga parametros concateno todo hasta el final.
		$nombre_completo = $nombre_completo . $ARGV[$i] . " ";
		$i++;
	}
	chop $nombre_completo; # Le saco el ultimo espacio que queda sobrando y listo.
} else {
	print "Ingrese Nombre Completo o descripcion de la cuenta: ";
	$nombre_completo = <stdin>;
	chop $nombre_completo; # le saco el enter final
}

# Inserto en la base de datos
$sql = "INSERT INTO mailbox (email, clear_password, name, maildir, mailquota, ftpquota, created, modified) VALUES (\'$mail\', \'$clave\', \'$nombre_completo\', \'$dominio/$inicial/$usuario/\', $quota, $quota, NOW(), NOW());";
$consulta = $dbh -> prepare("$sql");	# verifica sentencia sql
$rta = $consulta -> execute();		# Ejecuto consulta

# Si insertó ok, creo el maildir.
if ($rta == 1) {
	# Creo Estructura de Directorio
	system("mkdir -p /var/vmail/$dominio/$inicial/$usuario/public_html");
	# Creo estructura maildir
	system("maildirmake /var/vmail/$dominio/$inicial/$usuario/Maildir");
	# Creo archivo de quota 'maildirsize'. (Si faltara, no se aplica quota.)
	my $quotabytes = ($quota * 1024 * 1024) . "S";
	system("maildirmake -q $quotabytes /var/vmail/$dominio/$inicial/$usuario/Maildir");
	# Asigno permisos.
	system("chmod g-r,o-r /var/vmail/$dominio/$inicial/$usuario/Maildir/maildirsize");
	system("chown -R vmail:vmail /var/vmail/$dominio/$inicial/$usuario");
	print "Se agregó la cuenta \'$mail\'\n";
}
else {
	print "Error en INSERT al agregar la cuenta \'$mail\'\n";
}

} # Fin NuevaCuenta


sub EliminaCuenta() {

my $mail;
my $usuario;
my $dominio;
my $inicial;		# Inicial del usuario. (para la ruta del maildir)
my @divido_mail;	# Para separar el usuario del dominio del mail.
my $borrar;			# Preguntare si quiere borrar el maildir.

# Si se paso el mail por argumento se lo asigno a la variable $mail,
# Si no, lo pido.
if ($ARGV[2]) { $mail = $ARGV[2]; }
else { print "Mail para eliminar? "; $mail = <stdin>; chop $mail; }

# Si el mail no es mail salgo.
if (!esmail($mail)) { print "El mail no es válido.\n"; &Fin();}

@divido_mail = split(/\@/,$mail); # separo el usuario y dominio desde el mail.
$usuario = $divido_mail[0]; # Por claridad se lo asigno a $usuario.
$dominio = $divido_mail[1]; # Por claridad se lo asigno a $dominio.
$inicial = substr($usuario,0,1); # Extraigo la inicial del usuario.

# Busco el mail en todos los alias y 'grupos' y lo elimino.
&EliminaMaildeAlias($mail); # si solo se pasa el mail busca en todos los alias.

# Elimino la cuenta de mail.
$sql = "delete from mailbox where email = \'$mail\';";
$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
$rta = $consulta -> execute(); # Ejecuto consulta.

if ($rta == 1) { # Encontró y borró la cuenta en la base? 
	print "Cuenta \'$mail\' eliminada.\n";	
	# Borro directorio ?
	print "Elimino tambien el maildir de $usuario y todos sus mails?\n";
	do {
		print "si/no "; $borrar = <stdin>; chop $borrar;
		if ($borrar eq "si") {
			system ("rm -fr /var/vmail/$dominio/$inicial/$usuario");
			print "Eliminado.\n";
		} elsif ($borrar eq "no") {
			print "No se elimina. Se renombra a $usuario\_eliminado.\n";
			system ("mv /var/vmail/$dominio/$inicial/$usuario /var/vmail/$dominio/$inicial/$usuario\_eliminado");
		}
	} until ($borrar =~ /^(si|no)$/)
} else {
	print "No se encontró la cuenta $mail\n";
}
} # Fin sub EliminaCuenta #


sub VerCuentas() {

my $buscar;

# Si se paso el alias por argumento se lo asigno a la variable $alias.
# Si no, lo pido.
if ($ARGV[2]) { $buscar = $ARGV[2]; }
else { print "Que busco? >"; $buscar = <stdin>; chop $buscar; }


#Muestro las cuentas que posee el alias
$sql = "select email, name from mailbox where email like \'%$buscar%\' or name like \'%$buscar%\';";
$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
$consulta -> execute(); # Ejecuto consulta.

print "\n";
while (@data = $consulta -> fetchrow_array()) {
	print "> $data[0] - $data[1]\n";
}
print "\n";


} # Fin VerCuentas

sub NuevoDominio() {

my $dominio;     			# Nuevo dominio.
my $descripcion;			# Una descripcion para el dominio.

# Si se paso el dominio por argumento se lo asigno a la variable $dominio,
# Si no, lo pido.
if ($ARGV[2]){ $dominio = $ARGV[2]; }
else { print "Ingrese nuevo dominio: "; $dominio = <stdin>; chop $dominio; }

# A partir del parametro 3 hasta el final es la descripcion del dominio.
# Entonces si existe parametro 3, me pasaron la descripcion por linea de ordenes y la rejunto.
# Si no hay parametro 3, directamente pido la descripcion.
if ($ARGV[3]) {
	my $i = 3;
	$descripcion = "";
	while ($ARGV[$i]){ #Arranco en el 3 y mientras tenga parametros concateno todo hasta el final.
		$descripcion = $descripcion . $ARGV[$i] . " ";
		$i++;
	}
	chop $descripcion; # Le saco el ultimo espacio que queda sobrando y listo.
} else {
	print "Ingrese una descripcion del dominio: ";
	$descripcion = <stdin>;
	chop $descripcion; #saco el enter final.
}

# Inserto en la base.
$sql = "INSERT INTO mailbox_domains (domain, description, created, modified ) VALUES (\'$dominio\', \'$descripcion\', NOW(), NOW());";
$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
my $cant = $consulta -> execute(); # Ejecuto consulta.

if ($cant == 1) { print "Se agregó el dominio $dominio.\n"; }
else { print"Error al agregar $dominio. Ya existe tal vez?\n"; }

} # Fin NuevoDominio


sub EliminaDominio() {

my $dominio;
my $cant;

# Si se paso el dominio por argumento se lo asigno a la variable $dominio,
# Si no, lo pido.
if ($ARGV[2]) { $dominio = $ARGV[2]; }
else { print "Cual dominio elimino? "; $dominio = <stdin>; chop $dominio; }

$sql = "delete from mailbox_domains where domain = \'$dominio\';";
$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
$cant = $consulta -> execute(); # Ejecuto consulta.

if ($cant == 1) { print "Dominio \'$dominio\' eliminado.\n"; }
else { print "El dominio \'$dominio\' no existe.\n"; }

} # Fin sub EliminaDominio


sub VerDominios() {

my $buscar;

# Si se paso el alias por argumento se lo asigno a la variable $alias.
# Si no, lo pido.
if ($ARGV[2]) { $buscar = $ARGV[2]; }
else { print "Que busco? >"; $buscar = <stdin>; chop $buscar; }


#Muestro los dominios que contienen $buscar
$sql = "select domain, description from mailbox_domains where domain like \'%$buscar%\' or description like \'%$buscar%\';";
$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
$consulta -> execute(); # Ejecuto consulta.

print "\n";
while (@data = $consulta -> fetchrow_array()) {
	print "> $data[0] - $data[1]\n";
}
print "\n";


}

sub NuevoAlias() {

my $alias;
my $mail;

# Si se paso el alias por argumento se lo asigno a la variable $alias,
# Si no, lo pido.
if ($ARGV[2]) { $alias = $ARGV[2]; }
else { print "Ingrese alias: "; $alias = <stdin>; chop $alias; }

# Si el alias no es mail salgo.
if (!esmail($alias)) { print "El alias no es válido.\n"; &Fin();}

# Chequeo que exista el dominio del alias
if ( !existeDominio($alias) ) { print "El dominio del alias no existe.\n"; &Fin(); }

# Si tengo el mail lo uso, si no lo pido:
if ($ARGV[3]) { $mail = $ARGV[3]; }
else { print "Mail de destino? "; $mail = <stdin>; chop $mail; }

# Si el mail no es mail salgo.
if (!esmail($mail)) { print "El mail no es válido.\n"; &Fin();}

# Si el mail no existe aviso y pregunto
if ( !existeMail($mail) ) {
	print "El mail \'$mail\' no existe en este servidor.\n";
	print "Puede agregarlo de todas formas si es un mail externo.\n";
	print "Lo agrego?\n";
	do {
		print "si/no "; $rta = <stdin>; chop $rta;
		if 	($rta eq "si") { print "Ok.\n" ;}
		elsif ($rta eq "no") { print "Ok.\n" ;	&Fin(); }
	} until ($rta =~ /^(si|no)$/)
}


# Si el alias no existe lo creo.
if ( !existeAlias($alias) ) {
	# Inserto el nuevo alias con su destino en la base.
	$sql = "insert into alias (address, goto, created, modified) VALUES (\'$alias\', \'$mail\', NOW(), NOW());";
	$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
	$rta = $consulta -> execute(); # Ejecuto consulta.
	if ($rta == 1) { print "Nuevo alias \'$alias\'\ >> \'$mail\'\n"; }
	else { print "Error al insertar \'$alias\'\n"; print $rta; }
} else {
	# El alias existe. Tengo que agregarle un nuevo destino ($mail)
	# Traigo el destino actual. (campo 'goto')
	$sql = "select goto from alias where address = \'$alias\';";
	$consulta = $dbh -> prepare("$sql");
	$consulta -> execute();
	@data = $consulta -> fetchrow_array();
	my $destinos = $data[0];
	
	# Si no tiene fin de linea (separador) se lo agrego.
	if ( substr($destinos,-1) ne "\n" ) { $destinos = $destinos . "\n"; }
	
	# Le agrego el nuevo destino en cuestion.
	$destinos = $destinos . $mail . "\n";
	
	#Listo. hago el update en la base.
	$sql = "update alias set goto = \'$destinos\' where address = \'$alias\';";
	$consulta = $dbh -> prepare("$sql");
	$rta = $consulta -> execute();
	if ($rta == 1) { print "Se agregó \'$mail\' al alias \'$alias\'\n"; } else { print "Error inesperado en el update\n"; }
	
}

} # Fin sub NuevoAlias #


sub ImportaAlias() {

# Formato del archivo de alias:
# Primera linea, el primer alias.
# las lineas siguientes, los mails destinos del alias.
# hasta linea en blanco.
# luego segundo alias.
# Siguen los mails
# y así.

my $archivo;
my $alias;
my $mail;
my $destinos;
my $linea;

# Si se paso el archivo por argumento se lo asigno a la variable $archivo, si no lo pido.
if ($ARGV[2]) { $archivo = $ARGV[2]; }
else { print "Archivo con los Alias? "; $archivo = <stdin>; chop $archivo; }

open(ARCH, $archivo) || die "Mal! No encuentro \'$archivo\' :-(\n";

while ( <ARCH> ) {
	
	$destinos = "";
	$alias = $_; chop $alias;
	
	if ( esmail($alias) ) {

		# Comprobaciones
		if ( existeAlias($alias) ) { print "\'$alias\' ya existe. Aborto.\n"; &Fin(); }
		if ( !existeDominio($alias) ) { print "\'$alias\' tiene un dominio no valido. Aborto.\n"; &Fin(); }

		print "\nGenerando grupo \'$alias\'\n";
		
		# Empiezo a rescatar los mails.
		$mail = <ARCH>;
		while ( esmail($mail) ) {
			chop $mail;
			if ( existeMail($mail) ) {
				print "Agrego \'$mail\'\n";
				$destinos = $destinos . $mail . "\n"; }
			else {
				print "Omito \'$mail\' Cuenta Inexistente.\n";
			}
			$mail = <ARCH>;
		}	
		
		# Inserto el nuevo alias en la base. Solo si hay destinos.
		if ($destinos) {
			$sql = "insert into alias (address, goto, created, modified) VALUES (\'$alias\', \'$destinos\', NOW(), NOW());";
			$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
			$rta = $consulta -> execute(); # Ejecuto consulta.
			if ($rta == 1) { print "Insert Ok\n";} else {print "Error inesperado insertando grupo \'$alias\'\n"; }
		} else { print "No tengo destinos que insertar. Omito \'$alias\'\n"; }
	}
} # Fin While. Fin Archivo.

close(ARCH);

} # Fin ImportaAlias


sub EliminaAlias() {

my $alias;

# Si se paso el alias por argumento se lo asigno a la variable $alias,
# Si no, lo pido.
if ($ARGV[2]){ $alias = $ARGV[2]; }
else { print "Cual alias elimino? "; $alias = <stdin>; chop $alias; }

# Si el alias no es mail salgo.
if (!esmail($alias)) { print "El alias no es válido.\n"; &Fin();}

$sql = "delete from alias where address = \'$alias\';";
$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
$rta = $consulta -> execute(); # Ejecuto consulta.

if ($rta == 1) { print "Alias \'$alias\' eliminado.\n"; }
else { print "El alias \'$alias\' no existe.\n"; }

} # Fin sub EliminaAlias #


sub VerAlias() {

my $alias;
my $destinos;
my $mail;
my @mails;

# Si se paso el alias por argumento se lo asigno a la variable $alias.
# Si no, lo pido.
if ($ARGV[2]) { $alias = $ARGV[2]; }
else { print "Que busco? >"; $alias = <stdin>; chop $alias; }


#Muestro las cuentas que posee el alias
$sql = "select address, goto from alias where address like \'%$alias%\' or goto like \'%$alias%\';";
$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
$consulta -> execute(); # Ejecuto consulta.

while (@data = $consulta -> fetchrow_array()) {

	$alias    = $data[0];
	$destinos = $data[1];
	print "\n\'$alias\' redirecciona a:\n";
	@mails = split (/\n/,$destinos);
	# Ya tengo los destinos separados en @mails.
	# Imprimo los que haya.
	foreach (@mails) {
		print " > \'$_\'\n";
	}
}
print "\n";
} # Fin VerAlias


sub ModificaQuota() {

my $mail;
my $usuario;
my $dominio;
my $inicial;		# Inicial del usuario. (para crear la ruta del maildir)
my @divido_mail;	# Para separar el usuario del dominio del mail.
my $cant;			# Resultado del update de la base.

# Si se paso el mail por argumento se lo asigno a la variable $mail,
# Si no, lo pido.
if ($ARGV[1]) { $mail = $ARGV[1]; }
else { print "Cuenta a consultar? >"; $mail = <stdin>; chop $mail; }

if (!$mail) { &MuestraTodasLasQuotas(); } else {

	# Si el mail no es mail salgo.
	if (!esmail($mail)) { print "El mail no es válido.\n"; &Fin();}

	@divido_mail = split(/\@/,$mail); # separo el usuario y dominio desde el mail.
	$usuario = $divido_mail[0]; # Por claridad se lo asigno a $usuario.
	$dominio = $divido_mail[1]; # Por claridad se lo asigno a $dominio.
	$inicial = substr($usuario,0,1); # Extraigo la inicial del usuario.

	# Consulto por la quota de la cuenta.
	$sql = "select mailquota from mailbox where email = \'$mail\';";
	$consulta = $dbh -> prepare("$sql");
	$consulta -> execute();

	# Si tengo datos la cuenta existe entonces imprimo quota actual.
	if ( @data = $consulta -> fetchrow_array() ) {
		print "Quota actual: $data[0]MB  ";
		print "Usado: calculando"; #Imprimo 'usado' primero por si tarda el du, que quede ahi titilando el cursor.
		# Calculo e imprimo tamaño del maildir
		my @salida = `du -h /var/vmail/$dominio/$inicial/$usuario`; #Ejecuto el du y guardo la salida en @salida
		my @datos = split (/\s+/,$salida[int(@salida)-1]);	 # Separo el tamaño y el directorio de la ultima linea del du.
		# Finalmente muestro el tamaño del directorio.
		# retrocedo 10 caracteres para sobrescribir 'calculando',
		# le agrego la B de Bytes que el du no la pone y completo con espacios para 'tapar' totalmente la palabra calculando.
		# El '\b' retrocede sin borrar. por eso. Creo que no hay 'backspace'...
		print "\b\b\b\b\b\b\b\b\b\b$datos[0]B             \n";
		# (En $datos[1] tengo el directorio pero no lo muestro)
	}
	else { print "La cuenta \'$mail\' no existe.\n"; &Fin();} 

	print "Nuevo valor? ";
	$quota = <stdin>; chop $quota;

	if (($quota) and ($quota =~ /^\d+$/)) { # Esto es si quota no es nulo y contiene numeros.
		# Hago UPDATE
		$sql = "update mailbox set mailquota = $quota , ftpquota = $quota where email = \'$mail\';";
		$consulta = $dbh -> prepare("$sql");
		$consulta -> execute();
		# Y recreo el maildir con sus permisos.
		my $quotabytes = ($quota * 1024 * 1024) . "S"; 
		system("maildirmake -q $quotabytes /var/vmail/$dominio/$inicial/$usuario/Maildir");
		system("chmod g-r,o-r /var/vmail/$dominio/$inicial/$usuario/Maildir/maildirsize");
		print "Ahora \'$mail\' tiene $quota MB de quota.\n";
	} else {
		print "Ok. Sin cambios.\n";
	} #FinIf
} #FinIf de muestratodaslasquotas
} #Fin ModificaQuota


sub MuestraTodasLasQuotas() {

my $DirectorioRaiz = "/var/vmail/";
our @directorios;
our $i = 0;
my $mail;

find(\&cargaArchivos, $DirectorioRaiz);

sub cargaArchivos	{
	my $elemento = $_;
	if ((-d $elemento) and ($File::Find::name =~ /\/\w\/\w+$/)) {		# Si es un directorio y termina en ej'/g/gato' es lo que quiero
		$directorios[$i] = $File::Find::name;
		$i++;
	}
}

print "\n";
	foreach (@directorios) {
		$_ =~ /^$DirectorioRaiz(.+)\/\w\/(\w+)$/;
		$mail = "$2\@$1";
		# Consulto por la quota de la cuenta.
		$sql = "select mailquota from mailbox where email = \'$mail\';";
		$consulta = $dbh -> prepare("$sql");
		$consulta -> execute();
	
		my @salida = `du -h $_`; #Ejecuto el du y guardo la salida en @salida
		my @datos = split (/\s+/,$salida[int(@salida)-1]);	 # Separo el tamaño y el directorio de la ultima linea del du.

		if ( @data = $consulta -> fetchrow_array() ) {
			print "$_ $datos[0] de $data[0]MB\n";
		} else { print "$_ Tamaño: $datos[0] [Cuenta Inexistente]\n";	}
	}
print "\n";

} #Fin sub MuestraTodasLasQuotas 


sub ModificaPass() {

my $mail;
my $nuevopass;

# Si se paso el mail por argumento se lo asigno a la variable $mail,
# Si no, lo pido.
if ($ARGV[1]) { $mail = $ARGV[1]; }
else { print "Cuenta? "; $mail = <stdin>; chop $mail; }

# Consulto por la clave de la cuenta.
$sql = "select clear_password from mailbox where email = \'$mail\';";
$consulta = $dbh -> prepare("$sql");
$consulta -> execute();

# Consulto la password actual al tiempo que corroboro existencia de cuenta
if ( (@data = $consulta -> fetchrow_array()) ) { print "Actual: $data[0]\n"; } # Si vino data imprimo clave.
else { print "No existe la cuenta \'$mail\'\n"; &Fin();} 

print "Nuevo pass? "; $nuevopass = <stdin>; chop $nuevopass;

if ($nuevopass) {
	$sql = "update mailbox set clear_password = \'$nuevopass\' where email = \'$mail\';";
	$consulta = $dbh -> prepare("$sql");
	$rta = $consulta -> execute();
	if ($rta == 1) { print "Ok. Cambiado.\n"; } else { print "Error.\n"; }
} else {
	print "Ok. Sin cambios.\n";
}

} # Fin ModificaPass


sub ImportaCuentas() {

# Formato del archivo de cuentas:
# 2 o 3 campos separados por comas
# mail , nombre o descripcion , alias (o grupo) opcional
# Solo procesa lineas que contengan un @

my $clave;				# Password de la cuenta.
my $inicial;			# Inicial del usuario. (para crear la ruta del maildir)
my @divido_mail;		# Para separar el usuario del dominio del mail.
my $usuario;			# Antes del @ en el mail.
my $dominio;			# Despues del @ en el mail.
my $omitir;				# Bandera. Si hay algun error omito alta actual.
my @campos;				# Campos del archivo separado por comas.
my $mail;				# Primer campo, contendra el email.
my $nombre_completo;	# Segundo campo, Nombre completo o descripcion de la cuenta.
my $alias;           # Tercer campo opcional es un alias o 'grupo'.

open(ARCH, $ARGV[2]) || die "Mal!, No encuentro \'$ARGV[2]\' :-(\n";


while(<ARCH>)	# Leo todas las lineas del archivo.
{
	chop $_;			# $_ contiene la linea actual. (le saco el salto de linea final)
	$omitir = 0; 	# Reseteo omitir con cada vuelta del while.
	
	# solo proceso si la linea actual no es nulo y contiene un arroba.
	if ( ($_) and ($_ =~ m/\@/) )
	{ 
		@campos          = split(/\s*,\s*/,$_);		# Separo los campos (mail y descripcion) divididos por comas, con o sin espacios ;-)
		$mail        	  = $campos[0];
		$nombre_completo = $campos[1];
		$alias           = $campos[2];
		@divido_mail     = split(/\@/,$mail);		# separo el usuario y dominio desde el mail.
		$usuario         = $divido_mail[0];			# Por claridad se lo asigno a $usuario.
		$dominio         = $divido_mail[1];			# Por claridad se lo asigno a $dominio.
		$inicial         = substr($usuario,0,1);	# Extraigo la inicial del usuario.
		$clave 		     = $usuario . int(rand(9)) . int(rand(9)) . int(rand(9)) . int(rand(9));

		# Si el mail no es mail o es nulo omito.
		if (!esmail($mail)) { print "Omito \'$mail\' - No es válido.\n"; $omitir = 1; }

		# Existe la cuenta en la base?
		if ( existeMail($mail) ) {	print "Omito \'$mail\' - Ya existe.\n"; $omitir = 1; }

		# Chequeo que exista el dominio
		if ( !existeDominio($dominio) ) {
			print "Omito \'$mail\' - El dominio no existe.\n"; $omitir = 1;
		}
		# Si no hay error creo la cuenta, si no la dejo pasar hasta la siguiente linea.
		if (!$omitir) {
			# Inserto en la base de datos
			$sql = "INSERT INTO mailbox (email, clear_password, name, maildir, mailquota, ftpquota, created, modified) VALUES (\'$mail\', \'$clave\', \'$nombre_completo\', \'$dominio/$inicial/$usuario/\', $quota, $quota, NOW(), NOW());";
			$consulta = $dbh -> prepare("$sql");	# verifica sentencia sql
			$rta = $consulta -> execute();			# Ejecuto consulta

			# Si insertó ok, creo el maildir.
			if ($rta == 1) {
				# Creo Estructura de Directorio
				system("mkdir -p /var/vmail/$dominio/$inicial/$usuario/public_html");
				# Creo estructura maildir
				system("maildirmake /var/vmail/$dominio/$inicial/$usuario/Maildir");
				# Creo archivo de quota 'maildirsize'. (Si faltara, no se aplica quota.)
				my $quotabytes = ($quota * 1024 * 1024) . "S";
				system("maildirmake -q $quotabytes /var/vmail/$dominio/$inicial/$usuario/Maildir");
				# Asigno permisos.
				system("chmod g-r,o-r /var/vmail/$dominio/$inicial/$usuario/Maildir/maildirsize");
				system("chown -R vmail:vmail /var/vmail/$dominio/$inicial/$usuario");
				print "Se creó la cuenta \'$mail\'  pass: $clave\n";
				if (esmail($alias)) { system ("pfix add alias $alias $mail"); }
			}
			else {
				print "Error en INSERT al agregar la cuenta \'$mail\'\n";
			}
		} #fin if		
	} #fin if
} #fin while


close(ARCH);

} # Fin ImportaCuentas


sub EliminaMaildeAlias() {
# Elimina una direccion de mail de todos los alias que lo contienen. (ej. si se esta eliminando una cuenta)
# o solo del especificado. (ej. se lo saca de un grupo, cambia de sector, etc.)

my ($mail, $alias_dado) = @_ ; # Recibo parametros

my $alias;		# Alias que contienen el mail a eliminar.
my $destinos;	# Todo el campo con los mails tal cual esta en la base.
my @mails;		# Array con todos los mails de $destinos separados y sin saltos de linea.
my $update;		# Para hacer el update en la base.
my $delete;		# Para borrar el alias de la base.

$rta = 0;

# Si me pasan un alias solo consulto por ese.
if ($alias_dado) { $sql = "select address, goto from alias where goto like \'%$mail%\' and address = \'$alias_dado\';"; }
# Si no me pasan nada busco en todos los alias.
else { $sql = "select address, goto from alias where goto like \'%$mail%\';"; }

$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
$consulta -> execute(); # Ejecuto consulta.

# Muestro los alias que encontre.
while( @data = $consulta -> fetchrow_array() ) {
	$alias = $data[0];
	$destinos = $data[1];
	@mails = split (/\n/,$destinos);
	# Ya tengo los destinos en @mails.
	# Vacio $destinos para agregar todos menos $mail que queda eliminado. 
	$destinos = "";
	foreach (@mails) {
		if ( $_ ne $mail ) { $destinos = $destinos . $_ . "\n"; }
	}
	# Si $mail era el unico mail, el alias queda vacio. En tal caso lo elimino.
	if ($destinos) {
		#Si tengo destinos hago update.
		$sql = "update alias set goto = \'$destinos\' where address = \'$alias\';";
		$update = $dbh -> prepare("$sql"); # verifica sentencia sql
		$rta = $update -> execute(); # Ejecuto consulta.
		print "Se eliminó \'$mail\' del grupo \'$alias\'\n";
	} else {
		#Si destinos quedó vacio, elimino el alias.
		$sql = "delete from alias where address = \'$alias\';";
		$delete = $dbh -> prepare("$sql"); # verifica sentencia sql
		$rta = $delete -> execute(); # Ejecuto consulta.
		print "Cuenta \'$mail\' era el unico destino del alias \'$alias\'\n";
		print "Alias \'$alias\' eliminado.\n";
	}

}

if (!$rta) { print "No se encontraron alias para aliminar.\n"; }

} # Fin EliminaMaildeAlias


sub existeMail() {
	# Asigno el parametro
	my ($m) = @_ ;
	my @r;
	$sql = "select email from mailbox where email = \'$m\';";
	$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
	$consulta -> execute(); # Ejecuto consulta.
	if ( @r = $consulta -> fetchrow_array() ) { return 1; } else { return 0; }
} # Fin sub existeMail


sub existeAlias() {
	# Asigno el parametro
	my ($a) = @_ ;
	my @r;
	$sql = "select address from alias where address = \'$a\';";
	$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
	$consulta -> execute(); # Ejecuto consulta.
	if (@r = $consulta -> fetchrow_array()) { return 1; } else { return 0; }
} # Fin sub existeAlias


sub existeDominio() {
	my ($d) = @_ ;	# Asigno el parametro.
	my @r; 			# respuesta de la base.
	
	# Acepto que me pasen un mail completo tambien.
	if (esmail($d)){ 						# Si es mail dejo solo el dominio
		my @divido = split(/\@/,$d);	# separo el antes y el despues del arroba.
		$d = $divido[1];					# reasigno con el dominio solamente.
	}
	# Busco en mailbox_domains
	$sql = "select domain from mailbox_domains where domain = \'$d\';";
	$consulta = $dbh -> prepare("$sql"); # verifica sentencia sql
	$consulta -> execute(); # Ejecuto consulta.
	if (@r = $consulta -> fetchrow_array()) { return 1; } else { return 0; } #Si lo trajo devuelvo 1 si no 0.
} # Fin sub existeDominio


sub esmail() {
	# Asigno el parametro
	my ($m) = @_ ;
	# Tiene que no ser nulo, y machear con la expresion regular.
	if (($m) and ($m =~ /^[a-z0-9_]+@[a-z0-9]+\.[a-z]+\.?[a-z]+$/)) {return 1;} else {return 0;}
} #Fin esmail


sub Fin() {
	if (defined $consulta) 	{ $consulta -> finish(); }
	if (defined $dbh) 		{ $dbh -> disconnect; }
	exit;
}

